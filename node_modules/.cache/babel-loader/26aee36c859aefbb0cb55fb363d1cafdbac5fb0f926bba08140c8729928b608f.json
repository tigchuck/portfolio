{"ast":null,"code":"var _jsxFileName = \"/Users/charlietighe/Desktop/portfolio/src/components/pages/Contact.js\",\n  _s = $RefreshSig$();\nimport { useState, React } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Fab from '@mui/material/Fab';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Contact() {\n  _s();\n  const [values, setValues] = useState({\n    email: \"\",\n    subject: \"\",\n    message: \"\"\n  });\n  const inputFieldValues = [{\n    label: \"Your Email\",\n    id: \"email\",\n    value: values.email,\n    required: \"true\",\n    autoFocus: \"true\"\n  }, {\n    label: \"Subject\",\n    id: \"subject\",\n    value: values.subject,\n    fullWidth: \"true\"\n  }, {\n    label: \"Message\",\n    id: \"message\",\n    value: values.message,\n    required: \"true\",\n    multiline: \"true\",\n    rows: \"8\"\n  }];\n  const handleSubmit = e => {\n    e.preventDefault();\n    alert(`email: ${values.email}\\nsubject: ${values.subject}\\nmessage: ${values.message}`);\n  };\n  const handleChange = e => {\n    const name = e.target.name;\n    const value = e.target.value;\n    setValues({\n      ...values,\n      [name]: value\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        width: 500,\n        maxWidth: \"100%\"\n      },\n      children: [inputFieldValues.map((inputFieldValue, index) => {\n        var _inputFieldValue$requ, _inputFieldValue$mult, _inputFieldValue$rows;\n        return /*#__PURE__*/_jsxDEV(TextField, {\n          onChange: handleChange,\n          fullWidth: true,\n          margin: \"normal\",\n          required: (_inputFieldValue$requ = inputFieldValue.required) !== null && _inputFieldValue$requ !== void 0 ? _inputFieldValue$requ : false,\n          multiline: (_inputFieldValue$mult = inputFieldValue.multiline) !== null && _inputFieldValue$mult !== void 0 ? _inputFieldValue$mult : false,\n          rows: (_inputFieldValue$rows = inputFieldValue.rows) !== null && _inputFieldValue$rows !== void 0 ? _inputFieldValue$rows : 1,\n          label: inputFieldValue.label,\n          id: inputFieldValue.id,\n          value: inputFieldValue.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Fab, {\n        type: \"submit\",\n        variant: \"extended\",\n        sx: {\n          fontFamily: \"Abel\",\n          fontSize: \"16px\",\n          margin: \"32px auto\",\n          display: \"flex\",\n          width: \"0.25\"\n        },\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n}\n_s(Contact, \"ysUSyeK5d/OFWi8GEHX/z4cnhEo=\");\n_c = Contact;\nexport default Contact;\n\n// import { useState } from \"react\";\n\n// const PostContactForm = async (\n//   values: any,\n//   successCallback: any,\n//   errorCallback: any\n// ) => {\n//   // do stuff\n//   // if successful\n//   if (true) successCallback();\n//   else errorCallback();\n// };\n\n// const initialFormValues = {\n//   fullName: \"\",\n//   email: \"\",\n//   message: \"\",\n//   formSubmitted: false,\n//   success: false\n// };\n\n// export const useFormControls = () => {\n//   const [values, setValues] = useState(initialFormValues);\n//   const [errors, setErrors] = useState({} as any);\n\n//   const validate: any = (fieldValues = values) => {\n//     let temp: any = { ...errors };\n\n//     if (\"fullName\" in fieldValues)\n//       temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n\n//     if (\"email\" in fieldValues) {\n//       temp.email = fieldValues.email ? \"\" : \"This field is required.\";\n//       if (fieldValues.email)\n//         temp.email = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(fieldValues.email)\n//           ? \"\"\n//           : \"Email is not valid.\";\n//     }\n\n//     if (\"message\" in fieldValues)\n//       temp.message =\n//         fieldValues.message.length !== 0 ? \"\" : \"This field is required.\";\n\n//     setErrors({\n//       ...temp\n//     });\n//   };\n\n//   const handleInputValue = (e: any) => {\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value\n//     });\n//     validate({ [name]: value });\n//   };\n\n//   const handleSuccess = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: true\n//     });\n//   };\n\n//   const handleError = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: false\n//     });\n//   };\n\n//   const formIsValid = (fieldValues = values) => {\n//     const isValid =\n//       fieldValues.fullName &&\n//       fieldValues.email &&\n//       fieldValues.message &&\n//       Object.values(errors).every((x) => x === \"\");\n\n//     return isValid;\n//   };\n\n//   const handleFormSubmit = async (e: any) => {\n//     e.preventDefault();\n//     const isValid =\n//       Object.values(errors).every((x) => x === \"\") && formIsValid();\n//     if (isValid) {\n//       await PostContactForm(values, handleSuccess, handleError);\n//     }\n//   };\n\n//   return {\n//     values,\n//     errors,\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid\n//   };\n// };\n// //////////////////////////....////////////////////////////\n// import { Button, TextField } from \"@material-ui/core\";\n// import React from \"react\";\n// import { useFormControls } from \"./ContactFormControls\";\n\n// const inputFieldValues = [\n//   {\n//     name: \"fullName\",\n//     label: \"Full Name\",\n//     id: \"my-name\"\n//   },\n//   {\n//     name: \"email\",\n//     label: \"Email\",\n//     id: \"my-email\"\n//   },\n//   {\n//     name: \"message\",\n//     label: \"Message\",\n//     id: \"my-message\",\n//     multiline: true,\n//     rows: 10\n//   }\n// ];\n\n// export const ContactForm = () => {\n//   const {\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid,\n//     errors\n//   } = useFormControls();\n\n//   return (\n//     <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n//       {inputFieldValues.map((inputFieldValue, index) => {\n//         return (\n//           <TextField\n//             key={index}\n//             onChange={handleInputValue}\n//             onBlur={handleInputValue}\n//             name={inputFieldValue.name}\n//             label={inputFieldValue.label}\n//             error={errors[inputFieldValue.name]}\n//             multiline={inputFieldValue.multiline ?? false}\n//             fullWidth\n//             rows={inputFieldValue.rows ?? 1}\n//             autoComplete=\"none\"\n//             {...(errors[inputFieldValue.name] && {\n//               error: true,\n//               helperText: errors[inputFieldValue.name]\n//             })}\n//           />\n//         );\n//       })}\n//       <Button\n//         variant=\"contained\"\n//         type=\"submit\"\n//         color=\"secondary\"\n//         disabled={!formIsValid()}\n//       >\n//         Send Message\n//       </Button>\n//     </form>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["useState","React","Box","TextField","Fab","jsxDEV","_jsxDEV","Contact","_s","values","setValues","email","subject","message","inputFieldValues","label","id","value","required","autoFocus","fullWidth","multiline","rows","handleSubmit","e","preventDefault","alert","handleChange","name","target","onSubmit","children","sx","width","maxWidth","map","inputFieldValue","index","_inputFieldValue$requ","_inputFieldValue$mult","_inputFieldValue$rows","onChange","margin","fileName","_jsxFileName","lineNumber","columnNumber","type","variant","fontFamily","fontSize","display","_c","$RefreshReg$"],"sources":["/Users/charlietighe/Desktop/portfolio/src/components/pages/Contact.js"],"sourcesContent":["import { useState, React } from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport Fab from '@mui/material/Fab';\n\n\nfunction Contact() {\n\n    const [values, setValues] = useState({\n        email: \"\",\n        subject: \"\",\n        message: \"\"\n    });\n\n    const inputFieldValues = [\n        {\n            label: \"Your Email\", \n            id: \"email\",\n            value: values.email,\n            required: \"true\",\n            autoFocus: \"true\", \n    \n        },\n        {\n            label: \"Subject\", \n            id: \"subject\", \n            value: values.subject,\n            fullWidth: \"true\",\n        },\n        {\n            label: \"Message\", \n            id: \"message\",\n            value: values.message,\n            required: \"true\",\n            multiline: \"true\", \n            rows: \"8\",\n        }\n    ];\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        alert(`email: ${values.email}\\nsubject: ${values.subject}\\nmessage: ${values.message}`);\n    }\n\n    const handleChange = (e) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        setValues({...values, [name]: value});\n    }\n\n    return (\n        <form\n            onSubmit={handleSubmit}\n        >\n            <Box\n            sx={{\n                width: 500,\n                maxWidth: \"100%\",\n            }}\n            >\n                {inputFieldValues.map((inputFieldValue, index) => {\n                    return (\n                        <TextField \n                            onChange={handleChange}\n                            fullWidth\n                            margin=\"normal\"\n                            required={inputFieldValue.required ?? false}\n                            multiline={inputFieldValue.multiline ?? false}\n                            rows={inputFieldValue.rows ?? 1} \n                            label={inputFieldValue.label}\n                            id={inputFieldValue.id}\n                            value={inputFieldValue.value}\n                        />\n                    );\n                })}\n                <Fab\n                    type=\"submit\"\n                    variant=\"extended\"\n                    sx={{\n                        fontFamily: \"Abel\",\n                        fontSize: \"16px\",\n                        margin: \"32px auto\",\n                        display: \"flex\",\n                        width: \"0.25\"\n                        }}\n                >\n                    Submit\n                </Fab>\n            </Box>\n        </form>\n    );\n}\n\nexport default Contact;\n\n\n// import { useState } from \"react\";\n\n// const PostContactForm = async (\n//   values: any,\n//   successCallback: any,\n//   errorCallback: any\n// ) => {\n//   // do stuff\n//   // if successful\n//   if (true) successCallback();\n//   else errorCallback();\n// };\n\n// const initialFormValues = {\n//   fullName: \"\",\n//   email: \"\",\n//   message: \"\",\n//   formSubmitted: false,\n//   success: false\n// };\n\n// export const useFormControls = () => {\n//   const [values, setValues] = useState(initialFormValues);\n//   const [errors, setErrors] = useState({} as any);\n\n//   const validate: any = (fieldValues = values) => {\n//     let temp: any = { ...errors };\n\n//     if (\"fullName\" in fieldValues)\n//       temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n\n//     if (\"email\" in fieldValues) {\n//       temp.email = fieldValues.email ? \"\" : \"This field is required.\";\n//       if (fieldValues.email)\n//         temp.email = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(fieldValues.email)\n//           ? \"\"\n//           : \"Email is not valid.\";\n//     }\n\n//     if (\"message\" in fieldValues)\n//       temp.message =\n//         fieldValues.message.length !== 0 ? \"\" : \"This field is required.\";\n\n//     setErrors({\n//       ...temp\n//     });\n//   };\n\n//   const handleInputValue = (e: any) => {\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value\n//     });\n//     validate({ [name]: value });\n//   };\n\n//   const handleSuccess = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: true\n//     });\n//   };\n\n//   const handleError = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: false\n//     });\n//   };\n\n//   const formIsValid = (fieldValues = values) => {\n//     const isValid =\n//       fieldValues.fullName &&\n//       fieldValues.email &&\n//       fieldValues.message &&\n//       Object.values(errors).every((x) => x === \"\");\n\n//     return isValid;\n//   };\n\n//   const handleFormSubmit = async (e: any) => {\n//     e.preventDefault();\n//     const isValid =\n//       Object.values(errors).every((x) => x === \"\") && formIsValid();\n//     if (isValid) {\n//       await PostContactForm(values, handleSuccess, handleError);\n//     }\n//   };\n\n//   return {\n//     values,\n//     errors,\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid\n//   };\n// };\n// //////////////////////////....////////////////////////////\n// import { Button, TextField } from \"@material-ui/core\";\n// import React from \"react\";\n// import { useFormControls } from \"./ContactFormControls\";\n\n// const inputFieldValues = [\n//   {\n//     name: \"fullName\",\n//     label: \"Full Name\",\n//     id: \"my-name\"\n//   },\n//   {\n//     name: \"email\",\n//     label: \"Email\",\n//     id: \"my-email\"\n//   },\n//   {\n//     name: \"message\",\n//     label: \"Message\",\n//     id: \"my-message\",\n//     multiline: true,\n//     rows: 10\n//   }\n// ];\n\n// export const ContactForm = () => {\n//   const {\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid,\n//     errors\n//   } = useFormControls();\n\n//   return (\n//     <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n//       {inputFieldValues.map((inputFieldValue, index) => {\n//         return (\n//           <TextField\n//             key={index}\n//             onChange={handleInputValue}\n//             onBlur={handleInputValue}\n//             name={inputFieldValue.name}\n//             label={inputFieldValue.label}\n//             error={errors[inputFieldValue.name]}\n//             multiline={inputFieldValue.multiline ?? false}\n//             fullWidth\n//             rows={inputFieldValue.rows ?? 1}\n//             autoComplete=\"none\"\n//             {...(errors[inputFieldValue.name] && {\n//               error: true,\n//               helperText: errors[inputFieldValue.name]\n//             })}\n//           />\n//         );\n//       })}\n//       <Button\n//         variant=\"contained\"\n//         type=\"submit\"\n//         color=\"secondary\"\n//         disabled={!formIsValid()}\n//       >\n//         Send Message\n//       </Button>\n//     </form>\n//   );\n// };\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}