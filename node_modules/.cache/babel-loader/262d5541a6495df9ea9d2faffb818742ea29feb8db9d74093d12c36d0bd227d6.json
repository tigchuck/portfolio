{"ast":null,"code":"var _jsxFileName = \"/Users/charlietighe/Desktop/portfolio/src/components/pages/Contact.js\";\nimport React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst inputFieldValues = [{\n  fullWidth: \"true\",\n  required: \"true\",\n  autoFocus: \"true\",\n  margin: \"normal\",\n  label: \"Your Email\",\n  id: \"your-email\"\n}, {\n  fullWidth: \"true\",\n  margin: \"normal\",\n  label: \"Subject\",\n  id: \"fullWidth\"\n}, {\n  fullWidth: \"true\",\n  required: \"true\",\n  multiline: \"true\",\n  rows: \"8\",\n  margin: \"normal\",\n  label: \"Message\",\n  id: \"fullWidth\"\n}];\nfunction Contact() {\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      width: 500,\n      maxWidth: \"100%\"\n    },\n    children: inputFieldValues.map((inputFieldValue, index) => {\n      var _inputFieldValue$requ, _inputFieldValue$mult, _inputFieldValue$rows;\n      return /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: inputFieldValue.fullWidth,\n        required: (_inputFieldValue$requ = inputFieldValue.required) !== null && _inputFieldValue$requ !== void 0 ? _inputFieldValue$requ : false,\n        multiline: (_inputFieldValue$mult = inputFieldValue.multiline) !== null && _inputFieldValue$mult !== void 0 ? _inputFieldValue$mult : false,\n        rows: (_inputFieldValue$rows = inputFieldValue.rows) !== null && _inputFieldValue$rows !== void 0 ? _inputFieldValue$rows : 1,\n        margin: inputFieldValue.margin,\n        label: inputFieldValue.label,\n        id: inputFieldValue.id\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n}\n_c = Contact;\nexport default Contact;\n\n// import { useState } from \"react\";\n\n// const PostContactForm = async (\n//   values: any,\n//   successCallback: any,\n//   errorCallback: any\n// ) => {\n//   // do stuff\n//   // if successful\n//   if (true) successCallback();\n//   else errorCallback();\n// };\n\n// const initialFormValues = {\n//   fullName: \"\",\n//   email: \"\",\n//   message: \"\",\n//   formSubmitted: false,\n//   success: false\n// };\n\n// export const useFormControls = () => {\n//   const [values, setValues] = useState(initialFormValues);\n//   const [errors, setErrors] = useState({} as any);\n\n//   const validate: any = (fieldValues = values) => {\n//     let temp: any = { ...errors };\n\n//     if (\"fullName\" in fieldValues)\n//       temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n\n//     if (\"email\" in fieldValues) {\n//       temp.email = fieldValues.email ? \"\" : \"This field is required.\";\n//       if (fieldValues.email)\n//         temp.email = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(fieldValues.email)\n//           ? \"\"\n//           : \"Email is not valid.\";\n//     }\n\n//     if (\"message\" in fieldValues)\n//       temp.message =\n//         fieldValues.message.length !== 0 ? \"\" : \"This field is required.\";\n\n//     setErrors({\n//       ...temp\n//     });\n//   };\n\n//   const handleInputValue = (e: any) => {\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value\n//     });\n//     validate({ [name]: value });\n//   };\n\n//   const handleSuccess = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: true\n//     });\n//   };\n\n//   const handleError = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: false\n//     });\n//   };\n\n//   const formIsValid = (fieldValues = values) => {\n//     const isValid =\n//       fieldValues.fullName &&\n//       fieldValues.email &&\n//       fieldValues.message &&\n//       Object.values(errors).every((x) => x === \"\");\n\n//     return isValid;\n//   };\n\n//   const handleFormSubmit = async (e: any) => {\n//     e.preventDefault();\n//     const isValid =\n//       Object.values(errors).every((x) => x === \"\") && formIsValid();\n//     if (isValid) {\n//       await PostContactForm(values, handleSuccess, handleError);\n//     }\n//   };\n\n//   return {\n//     values,\n//     errors,\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid\n//   };\n// };\n// //////////////////////////....////////////////////////////\n// import { Button, TextField } from \"@material-ui/core\";\n// import React from \"react\";\n// import { useFormControls } from \"./ContactFormControls\";\n\n// const inputFieldValues = [\n//   {\n//     name: \"fullName\",\n//     label: \"Full Name\",\n//     id: \"my-name\"\n//   },\n//   {\n//     name: \"email\",\n//     label: \"Email\",\n//     id: \"my-email\"\n//   },\n//   {\n//     name: \"message\",\n//     label: \"Message\",\n//     id: \"my-message\",\n//     multiline: true,\n//     rows: 10\n//   }\n// ];\n\n// export const ContactForm = () => {\n//   const {\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid,\n//     errors\n//   } = useFormControls();\n\n//   return (\n//     <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n//       {inputFieldValues.map((inputFieldValue, index) => {\n//         return (\n//           <TextField\n//             key={index}\n//             onChange={handleInputValue}\n//             onBlur={handleInputValue}\n//             name={inputFieldValue.name}\n//             label={inputFieldValue.label}\n//             error={errors[inputFieldValue.name]}\n//             multiline={inputFieldValue.multiline ?? false}\n//             fullWidth\n//             rows={inputFieldValue.rows ?? 1}\n//             autoComplete=\"none\"\n//             {...(errors[inputFieldValue.name] && {\n//               error: true,\n//               helperText: errors[inputFieldValue.name]\n//             })}\n//           />\n//         );\n//       })}\n//       <Button\n//         variant=\"contained\"\n//         type=\"submit\"\n//         color=\"secondary\"\n//         disabled={!formIsValid()}\n//       >\n//         Send Message\n//       </Button>\n//     </form>\n//   );\n// };\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","Box","TextField","jsxDEV","_jsxDEV","inputFieldValues","fullWidth","required","autoFocus","margin","label","id","multiline","rows","Contact","sx","width","maxWidth","children","map","inputFieldValue","index","_inputFieldValue$requ","_inputFieldValue$mult","_inputFieldValue$rows","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/charlietighe/Desktop/portfolio/src/components/pages/Contact.js"],"sourcesContent":["import React from 'react';\nimport Box from '@mui/material/Box';\nimport TextField from '@mui/material/TextField';\n\nconst inputFieldValues = [\n    {\n        fullWidth: \"true\",\n        required: \"true\",\n        autoFocus: \"true\", \n        margin: \"normal\" ,\n        label: \"Your Email\", \n        id: \"your-email\" \n    },\n    {\n        fullWidth: \"true\",\n        margin: \"normal\", \n        label: \"Subject\", \n        id: \"fullWidth\", \n    },\n    {\n        fullWidth: \"true\",\n        required: \"true\",\n        multiline: \"true\", \n        rows: \"8\",\n        margin: \"normal\",\n        label: \"Message\", \n        id: \"fullWidth\" \n    }\n  ];\n\nfunction Contact() {\n    return (\n        <Box\n        sx={{\n            width: 500,\n            maxWidth: \"100%\",\n        }}\n        >\n            {inputFieldValues.map((inputFieldValue, index) => {\n                return (\n                    <TextField \n                        key={index}\n                        fullWidth={inputFieldValue.fullWidth}\n                        required={inputFieldValue.required ?? false}\n                        multiline={inputFieldValue.multiline ?? false}\n                        rows={inputFieldValue.rows ?? 1} \n                        margin={inputFieldValue.margin}\n                        label={inputFieldValue.label}\n                        id={inputFieldValue.id}\n                    />\n                );\n            })}\n        </Box>\n    );\n}\n\nexport default Contact;\n\n\n// import { useState } from \"react\";\n\n// const PostContactForm = async (\n//   values: any,\n//   successCallback: any,\n//   errorCallback: any\n// ) => {\n//   // do stuff\n//   // if successful\n//   if (true) successCallback();\n//   else errorCallback();\n// };\n\n// const initialFormValues = {\n//   fullName: \"\",\n//   email: \"\",\n//   message: \"\",\n//   formSubmitted: false,\n//   success: false\n// };\n\n// export const useFormControls = () => {\n//   const [values, setValues] = useState(initialFormValues);\n//   const [errors, setErrors] = useState({} as any);\n\n//   const validate: any = (fieldValues = values) => {\n//     let temp: any = { ...errors };\n\n//     if (\"fullName\" in fieldValues)\n//       temp.fullName = fieldValues.fullName ? \"\" : \"This field is required.\";\n\n//     if (\"email\" in fieldValues) {\n//       temp.email = fieldValues.email ? \"\" : \"This field is required.\";\n//       if (fieldValues.email)\n//         temp.email = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/.test(fieldValues.email)\n//           ? \"\"\n//           : \"Email is not valid.\";\n//     }\n\n//     if (\"message\" in fieldValues)\n//       temp.message =\n//         fieldValues.message.length !== 0 ? \"\" : \"This field is required.\";\n\n//     setErrors({\n//       ...temp\n//     });\n//   };\n\n//   const handleInputValue = (e: any) => {\n//     const { name, value } = e.target;\n//     setValues({\n//       ...values,\n//       [name]: value\n//     });\n//     validate({ [name]: value });\n//   };\n\n//   const handleSuccess = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: true\n//     });\n//   };\n\n//   const handleError = () => {\n//     setValues({\n//       ...initialFormValues,\n//       formSubmitted: true,\n//       success: false\n//     });\n//   };\n\n//   const formIsValid = (fieldValues = values) => {\n//     const isValid =\n//       fieldValues.fullName &&\n//       fieldValues.email &&\n//       fieldValues.message &&\n//       Object.values(errors).every((x) => x === \"\");\n\n//     return isValid;\n//   };\n\n//   const handleFormSubmit = async (e: any) => {\n//     e.preventDefault();\n//     const isValid =\n//       Object.values(errors).every((x) => x === \"\") && formIsValid();\n//     if (isValid) {\n//       await PostContactForm(values, handleSuccess, handleError);\n//     }\n//   };\n\n//   return {\n//     values,\n//     errors,\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid\n//   };\n// };\n// //////////////////////////....////////////////////////////\n// import { Button, TextField } from \"@material-ui/core\";\n// import React from \"react\";\n// import { useFormControls } from \"./ContactFormControls\";\n\n// const inputFieldValues = [\n//   {\n//     name: \"fullName\",\n//     label: \"Full Name\",\n//     id: \"my-name\"\n//   },\n//   {\n//     name: \"email\",\n//     label: \"Email\",\n//     id: \"my-email\"\n//   },\n//   {\n//     name: \"message\",\n//     label: \"Message\",\n//     id: \"my-message\",\n//     multiline: true,\n//     rows: 10\n//   }\n// ];\n\n// export const ContactForm = () => {\n//   const {\n//     handleInputValue,\n//     handleFormSubmit,\n//     formIsValid,\n//     errors\n//   } = useFormControls();\n\n//   return (\n//     <form autoComplete=\"off\" onSubmit={handleFormSubmit}>\n//       {inputFieldValues.map((inputFieldValue, index) => {\n//         return (\n//           <TextField\n//             key={index}\n//             onChange={handleInputValue}\n//             onBlur={handleInputValue}\n//             name={inputFieldValue.name}\n//             label={inputFieldValue.label}\n//             error={errors[inputFieldValue.name]}\n//             multiline={inputFieldValue.multiline ?? false}\n//             fullWidth\n//             rows={inputFieldValue.rows ?? 1}\n//             autoComplete=\"none\"\n//             {...(errors[inputFieldValue.name] && {\n//               error: true,\n//               helperText: errors[inputFieldValue.name]\n//             })}\n//           />\n//         );\n//       })}\n//       <Button\n//         variant=\"contained\"\n//         type=\"submit\"\n//         color=\"secondary\"\n//         disabled={!formIsValid()}\n//       >\n//         Send Message\n//       </Button>\n//     </form>\n//   );\n// };\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,mBAAmB;AACnC,OAAOC,SAAS,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,gBAAgB,GAAG,CACrB;EACIC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,MAAM;EAChBC,SAAS,EAAE,MAAM;EACjBC,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,YAAY;EACnBC,EAAE,EAAE;AACR,CAAC,EACD;EACIL,SAAS,EAAE,MAAM;EACjBG,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,SAAS;EAChBC,EAAE,EAAE;AACR,CAAC,EACD;EACIL,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,MAAM;EAChBK,SAAS,EAAE,MAAM;EACjBC,IAAI,EAAE,GAAG;EACTJ,MAAM,EAAE,QAAQ;EAChBC,KAAK,EAAE,SAAS;EAChBC,EAAE,EAAE;AACR,CAAC,CACF;AAEH,SAASG,OAAOA,CAAA,EAAG;EACf,oBACIV,OAAA,CAACH,GAAG;IACJc,EAAE,EAAE;MACAC,KAAK,EAAE,GAAG;MACVC,QAAQ,EAAE;IACd,CAAE;IAAAC,QAAA,EAEGb,gBAAgB,CAACc,GAAG,CAAC,CAACC,eAAe,EAAEC,KAAK,KAAK;MAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;MAC9C,oBACIpB,OAAA,CAACF,SAAS;QAENI,SAAS,EAAEc,eAAe,CAACd,SAAU;QACrCC,QAAQ,GAAAe,qBAAA,GAAEF,eAAe,CAACb,QAAQ,cAAAe,qBAAA,cAAAA,qBAAA,GAAI,KAAM;QAC5CV,SAAS,GAAAW,qBAAA,GAAEH,eAAe,CAACR,SAAS,cAAAW,qBAAA,cAAAA,qBAAA,GAAI,KAAM;QAC9CV,IAAI,GAAAW,qBAAA,GAAEJ,eAAe,CAACP,IAAI,cAAAW,qBAAA,cAAAA,qBAAA,GAAI,CAAE;QAChCf,MAAM,EAAEW,eAAe,CAACX,MAAO;QAC/BC,KAAK,EAAEU,eAAe,CAACV,KAAM;QAC7BC,EAAE,EAAES,eAAe,CAACT;MAAG,GAPlBU,KAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQb,CAAC;IAEV,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACC,EAAA,GAxBQf,OAAO;AA0BhB,eAAeA,OAAO;;AAGte,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}